#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>
#define Row 3
#define Col 3
////杨氏矩阵 
//有一个二维数组.
//数组的每行从左到右是递增的，每列从上到下是递增的.
//在这样的数组中查找一个数字是否存在。
//时间复杂度小于O(N);
//
//数组：
//1 2 3
//2 3 4
//3 4 5

#if 0
int Find_Num(int arr[Row][Col], int row, int col, int num){
	int left = 0;
	int right = col - 1;
	while ((left <row) && (right >=0)){
		if (arr[left][right] < num){
			++left;
		}
		if (arr[left][right]>num){
			--right;
		}
		if (arr[left][right] == num){
			return 1;
		}
	}return 0;
}


int main(){
	int arr[Row][Col] = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	printf("请输入要查找的数字：\n");
	int num = 0;
	scanf("%d", &num);
	int ret = Find_Num(arr, Row, Col, num);
	if (ret == 1){
		printf("存在！\n");
	}
	else{
		printf("不存在！\n");
	}
	system("pause");
	return 0;
}
#endif
//调整数组使奇数全部都位于偶数前面。
//
//题目：
//
//输入一个整数数组，实现一个函数，
//来调整该数组中数字的顺序使得数组中所有的奇数位于数组的前半部分，
//所有偶数位于数组的后半部分。

void Sort_Arr(int* arr, int len){
	int* start = arr;
	int* end = arr + len - 1;
	while (start < end){
		int temp;
		while ((*start & 1) == 1){
			++start; //表示*start是基数，则再接着往下判断，否则不往下
		} while ((*end & 1) == 0){
			--end;   //表示*end是偶数，则再接着往下判断，否则不往下
		} if (start < end){
			temp = *start;
			*start = *end;
			*end = temp;
			++start;
			--end;
		}
	}
}

int main(){
	int arr[] = { 2, 3, 5, 6, 7, 8, 10, 12, 13, 15, 17 };
	Sort_Arr(arr, sizeof(arr) / sizeof(arr[0]));
	int len = sizeof(arr) / sizeof(arr[0]);
	for (int i = 0; i < len; ++i){
		printf("%3d ", arr[i]);
	}
	printf("\n");
	system("pause");
	return 0;
}
