//operation包中

//(1)IOperation接口


import package_bookmanager.book.BookList;

        public interface IOperation {
            void work(BookList bookList);
        }


//（2）AddOperation


import package_bookmanager.book.Book;
import package_bookmanager.book.BookList;

import java.util.Scanner;

        public class AddOperation implements IOperation {
            @Override
            public void work(BookList bookList) {
                System.out.println("新增一本书籍");
                Scanner scanner = new Scanner(System.in);
                System.out.println("请输入书名：");
                String name = scanner.next();
                System.out.println("请输入序号：");
                String id = scanner.next();
                System.out.println("请输入作者：");
                String author = scanner.next();
                System.out.println("请输入价格：");
                int price = scanner.nextInt();
                System.out.println("请输入类别：");
                String type = scanner.next();
                Book book = new Book(name,id,author,
                        price,type,false);
                bookList.setBook(bookList.getSize(),book);
                bookList.setSize(bookList.getSize() + 1);
            }
        }

//(3)FindOperation


import package5.B;
import package_bookmanager.book.Book;
import package_bookmanager.book.BookList;

import java.util.Scanner;

        public class    FindOperation implements IOperation {
            @Override
            public void work(BookList bookList) {
                System.out.println("查找书籍");
                Scanner scanner = new Scanner(System.in);
                System.out.println("请输入要查找的书名");
                String name = scanner.next();
                int count = 0;
                for (int i = 0; i < bookList.getSize(); i++) {
                    Book book = bookList.getBook(i);
                    if (book.getName().equals(name)) {
//                打印这本书的信息
                        System.out.println(book);
                        count++;
                    }
                }
                if (count == 0) {
                    System.out.println("没找到此书");
                } else {
                    System.out.println("共计找到 " + count + " 本书");
                }
            }
        }

//(4)PrintOperation


import package_bookmanager.book.BookList;

        public class PrintOperation implements IOperation {
            @Override
            public void work(BookList bookList) {
                System.out.println("打印所有书籍信息");
                for (int i = 0; i < bookList.getSize(); i++) {
                    System.out.println(bookList.getBook(i));
                }
                System.out.println("共计 " + bookList.getSize() + " 本书");
            }
        }

//(5)DelOperation


import package5.B;
import package_bookmanager.book.Book;
import package_bookmanager.book.BookList;

import java.util.Scanner;

        public class DelOperation implements IOperation {
            @Override
            public void work(BookList bookList) {
                System.out.println("删除书籍");
                Scanner scanner = new Scanner(System.in);
                System.out.println("请输入要删除的序号：");
                String id = scanner.next();
//        先查找
                int i = 0;
                for (; i < bookList.getSize(); i++) {
                    Book book = bookList.getBook(i);
                    if (book.getId().equals(id)) {
//                找到了
                        break;
                    }
                }
                if (i >= bookList.getSize()) {
//            没找到
                    System.out.println("未找到要删除书籍!");
                    return;
                }
//        处理找到了的情况
//        直接用最后一个元素覆盖当前要删除的元素
//        再进行尾删
                Book lastBook = bookList.getBook(bookList.getSize() - 1);
                bookList.setBook(i,lastBook);
                bookList.setSize(bookList.getSize() - 1);
                System.out.println("删除成功!");
            }
        }


//(6)ExitOperation


import package_bookmanager.book.BookList;

        public class ExitOperation implements IOperation {
            @Override
            public void work(BookList bookList) {
                System.out.println("goodbye!");
//        类似于C语言中的 main 函数 return 0
//        0 叫做"进程退出码"
                System.exit(0);
            }
        }

//(7)BorrowOperation


import package5.B;
import package_bookmanager.book.Book;
import package_bookmanager.book.BookList;

import java.util.Scanner;

        public class BorrowOperation implements IOperation {
            @Override
            public void work(BookList bookList) {
                System.out.println("借阅书籍");
                Scanner scanner = new Scanner(System.in);
                System.out.println("请输入要借阅的书的编号：");
                String id = scanner.next();
                for (int i = 0; i < bookList.getSize(); i++) {
                    Book book = bookList.getBook(i);
                    if (!book.getId().equals(id)) {
                        continue;
                    }
//            执行具体的借书操作
                    if (book.isBorrowed()) {
                        System.out.println("这本书已经被借走了！");
                        break;
                    }
                    book.setBorrowed(true);
                }
            }
        }

//(8)ReturnOperation


import package_bookmanager.book.Book;
import package_bookmanager.book.BookList;

import java.util.Scanner;

        public class ReturnOperation implements IOperation {
            @Override
            public void work(BookList bookList) {
                System.out.println("归还书籍");
                Scanner scanner = new Scanner(System.in);
                System.out.println("请输入要归还的书的编号：");
                String id = scanner.next();
                for (int i = 0; i < bookList.getSize(); i++) {
                    Book book = bookList.getBook(i);
                    if (!book.getId().equals(id)) {
                        continue;
                    }
//            执行具体的还书操作
                    if (!book.isBorrowed()) {
                        System.out.println("这本书已经被归还！");
                        break;
                    }
                    book.setBorrowed(false);
                }

            }
        }
