#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#if 0
int main(){
	int a[] = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24 };
	int* q[4];
	int k;
	for (k = 0; k < 4; ++k){
		q[k] = &a[k * 3];
	}
	printf("%d\n", q[3][1]);
	system("pause");
	return 0;
}
int main(){
	int i = 0;
	int j = 0;
	int a = 0;
	for (i = 0; i < 2; ++i){
		for (j = 2; j < 4; ++j){
			if (j % 2){
				break;
			}
			++a;
		}
		++a;
	}
	printf("%d\n", a);
	system("pause");
	return 0;
}

int ma(){
	int i = 0;
	for (i = 1; i <= 10; ++i){
		if (i == 5){
			break;
		}
		printf("%d\n", i);
	}
	system("pause");
	return 0;
}


//二维数组中，每一行按照从左到右递增的顺序排序，每一列按照从上到下递增的顺序排序
//完成一个函数，输入这样的二维数组和一个整数
//判断数组中是否含有该整数，时间复杂度0（row+col)

//例如：  1  2  3
       // 2  4  5
	   // 6  8  9
//这种题找左下角和右上角的数字作为依据，这样遇到比他俩大或者小的数，可以做出选择


void Find_Num(int arr[3][3], int num){
	int i=0;
	int j=2;
	while (1){
		if (num > arr[i][j] && i < 3){
			++i;
		}
		else if (num < arr[i][j] && j < 3){
			--j;
		}
		else if (num==arr[i][j]) {
			printf("找到了！\n");
			break;
		}
		else {
			printf("没找到！\n");
			break;
		}
	}
}


int main(){
	int arr[3][3] = {
		4, 9, 12,
		7, 10, 13,
		8, 11, 15
	};
	Find_Num(arr, 16);
	system("pause");
	return 0;
}
//写一个函数，将字符串中的空格替换为%20
//例如：“abc erf sdf"替换为"abc%20erf%20sdf"
void Replace(char arr[],int size){
	int old_len = strlen(arr);
	int i;
	int new_len;
	int sum = 0;
	for (i = 0; i < old_len; ++i){
		if (arr[i] == ' '){
			++sum;
		}
	}
	 new_len = old_len + sum * 2 ;
	 int p1 = old_len;
	 int p2 = new_len;
	 arr[new_len] = '\0';
	 while (p1>0 && p2 > 0){
		 if (arr[p1] == ' '){
			 arr[p2] = '0';
			 arr[p2 - 1] = '2';
			 arr[p2 - 2] = '%';
			 --p1;
			 p2 = p2 - 3;
		 }
		 else {
			 arr[p2--] = arr[p1--];
		 }
	 }printf("%s\n", arr);
}

int main(){
	char arr[] =  "wo ai zhongguo" ;
	int size = strlen(arr);
	Replace(arr, size); 
	system("pause");
	return 0;
}

int main(){
	int a = 5;
	if (a = 0){
		printf("%d\n", a - 10);
	}
	else {
		printf("%d\n", ++a);
	}
	system("pause");
	return 0;
}

//求第n个斐波那契数列的值

int Fib(int n){
	int i = 0;
	int a = 1;
	int b = 1;
	int ret = 0;
	if (n <= 2){
		return 1;
	}
	else {
		for (i = 0; i <= n; ++i){
			ret = a + b;
			a = b;
			b = ret;
		}
	}
	return ret;
}

int main(){
	int n;
	printf("请输入需要计算的斐波那契数：");
	scanf("%d", &n);
	int ret2 = Fib(n);
	printf("最后结果为%d\n", ret2);
	system("pause");
	return 0;
}
#define F(x,y) ((x)+(y))
int main(){
	int a = 3;
	int b = 4;
	printf("%d\n", F(a++, b++));
	system("pause");
	return 0;
}

int fun(int x, int y){
	static int m = 0;//static在局部变量前，该语句只执行一次，以后使用上一次的结果
	static int i = 2;
	i += m + 1;
	m = i + x + y;
	return m;
}


int main(){
	int j = 4;
	int m = 1;
	int k;
	k = fun(j, m);
	printf("%d\n", k);
	system("pause");
	return 0;
}


//写一个函数，求unsigned int 型变量x在内存中二进制1的个数

int count_one_bits(int n){
	int count = 0;
	while (n){
		n = n&(n - 1);
		++count;
	}
	return count;
}


int main(){
	int n;
	printf("请输入一个数：");
	scanf("%d", &n);
	int ret=count_one_bits(n);
	printf("这个数在内存中二进制1的个数为%d\n",ret);
	system("pause");
	return 0;
}

int change(int* px){
	int y = 8;
	y = y - *px;
	px = &y;
	return 0;
}


int main(){
	int xx = 3;
	int* py = &xx;
	change(py);
	printf("%d\n", *py);
	system("pause");
	return 0;
}

#endif

int main(){
	char arr[2][4];
	strcpy((char*)arr, "you");
	strcpy(arr[1], "me");
	arr[0][3] = '&';
	printf("%s\n", arr);
	system("pause");
	return 0;
}

// 5???
int f(int x){
	int b = 0;
	static int c = 3;
	x = ++c;
	++b;
	return x;
}

int main(){
	int a = 2, i, k;
	for (i = 0; i < 2; ++i){
		k = f(++a);
	}
	printf("%d\n", k);
	system("pause");
	return 0;
}

int main(){
	int m;
	int n = 0;
	for (m = 0, n = -1; n = 0; ++m, ++n){
		++n;
	}
	printf("%d\n", n);
	system("pause");
	return 0;
}

int a = 2;
int test(){
	int a = 2;
	a += 1;
}

int main(){
	test();
	printf("%d\n", a);
	system("pause");
	return 0;
}

int main(){
	int y = 10;
	int x = 0;
	x = y++;
	printf("%d  %d\n", x, y);
	system("pause");
	return 0;
}

int main(){
	int i = 0;
	int j = 0;
	if ((++i > 0) || (++j > 0)){
		printf("i=%d;j=%d\n", i, j);
	}
	system("pause");
	return 0;
}

#define MOD(x,y) x%y
int main(){
	int a = 13;
	int b = 94;
	printf("%d\n", MOD(b, a + 4));
	system("pause");
	return 0;
}
//有一个数组a，编写函数，求数组中前k个最小的数字

void Swap(int* x, int* y){
	int tmp = *x;
	*x = *y;
	*y = tmp;
}

void Find_Min_Num(int a[], int k){
	int bound = 0;
	for (bound = 0; bound < k; ++bound){
		for (int cur = k - 1; cur>bound; --cur){
			if (a[cur - 1] > a[cur]){
				Swap(&a[cur - 1], &a[cur]);//降序
			}
		}
	}
}

int main(){
	int a[] = { 5, 4, 6, 3, 2, 19, 18, 43, 5, 12, 7 };
	int k = 5;
	Find_Min_Num(a, k);
	int ret = a[0];
	printf("最小数字为：%d\n",ret);
	system("pause");
	return 0;
}
?????
int main(){
	char a[] = "abc";
	char b[] = { 'a', 'b', 'c', 'd', 'e', 'f', 'g' };
	printf("%d\n", strlen(a));
	system("pause");
	return 0;
}
//????
int main(){
	int s = 0;
	int n;
	for (n = 0; n < 4; ++n){
		switch (n){
		fedault:
			s += 4;
		case 1:
			s += 1;
		case 2:
			s += 2;
		case 3:
			s += 3;
		}
	}
	printf("%d\n", s);
	system("pause");
	return 0;
}


int main(){
	char* a = "blue1";
	char b[] = "bule1";
	printf("%d", sizeof(b));
	system("pause");
	return 0;
}
#endif
//编写函数：求数组中元素出现次数超过数组长度一半的数字。
//如{1，2，3，2，2，2，5，4，2}数字2为超过数组长度一半的数字

void swap(int* x, int* y){
	int tmp = *x;
	*x = *y;
	*y = tmp;
}

void bubble_sort(int* arr, int len){
	int bound = 0;
	for (bound = 0; bound < len; ++bound){
		for (int cur = len - 1; cur>bound; --cur){
			if (arr[cur - 1] > arr[cur]){
				swap(&arr[cur - 1], &arr[cur]);
			}
		}
	}
}


void Find_Num(int* arr, int len){
	bubble_sort(arr, len);
	int mid_num = arr[len / 2];
	printf("超过数组长度一半的数字为:%d\n",mid_num);
}

int main(){
	int arr[] = { 1, 2, 3, 1, 1, 1 };
	int len = sizeof(arr) / sizeof(arr[0]);
	Find_Num(arr, len);
	system("pause");
	return 0;
}


void Func(char str_arg[2]){
	int m = sizeof(str_arg);
	int n = strlen(str_arg);
	printf("%d\n", m);//4?????????????????
	printf("%d\n", n);
}


int main(){
	char str[] = "hello";
	Func(str);
	system("pause");
	return 0;
}


int main(){
	int a, x;
	for (a = 0, x = 0;a<=1 && !x++; ++a){
		++a;
	}
	printf("%d %d\n", a, x);
	system("pause");
	return 0;
}

int main(){
	int a[5] = { 1, 2, 3, 4, 5 };
	int* p1 = (int*)(&a + 1);
	int* p2 = (int*)((int)a + 1);
	int* p3 = (int*)(a + 1);
	printf("%d, %x, %d\n", p1[-1], p2[0], p3[1]);
	system("pause");
	return 0;
}
//输入一个整形数组，数组里有正数也有负数，数组中一个或连续的多个整数组成一个子数组
//求所有子数组的和的最大值，要求时间复杂度为O(n)
//例如输入的数组为{1，-2，3，10，-4，7，2，-5}，和最大的子数组为{3，10，-4，7，2}
//因此输出为该子数组的和18
int Find_Max_Arr(int* str, int len){
	int max = 0;
	int tmp = 0;
	int i = 0;
	//先进行参数合法性判断
	if (str == NULL){
		return 0;
	} if (len == 0){
		return 0;
	}
	for (i=0;i<len;++i){
		if (tmp <= 0){
			tmp = str[i];
		}
		else {
			tmp += str[i];
		}if (max < tmp){
			max = tmp;
		}
	}
	return max;
}

int main(){
	int str[] = { 3, -1, 13, -8, 9, 4, 5, -2, -10 };
	int len = sizeof(str) / sizeof(str[0]);
	int ret = Find_Max_Arr(str, len);
	printf("%d\n", ret);
	system("pause");
	return 0;
}

//？？？？？？？？？？？？？？？？？？？？？？/
int main(){
	char a[] = "abc";
	char b[] = { 'a', 'b', 'c' };
	char* c = "abc";
	char* d = "abc";
	*a = 'g';
	//*b = 'g';
	printf("%d\n", sizeof(a));
	printf("%d\n", sizeof(b));

	printf("%s\n", a);
	printf("%s\n", b);
	printf("%p\n", c);
	printf("%p\n", d);
	system("pause");
	return 0;
}

//????????????????
int main(){
	char* str[3] = { "stra", "strb", "strc" };
	char* p = str[0];
	int i = 0;
	while (i < 3){
		printf("%s ", p++);
		i++;
	}
	system("pause");
	return 0;
}

int main(){
	const char* b = "abc";
	char const *c = "abc";
	char* const a = "abc";
	//*c = 'g';
	//*a = 'g';
	*a = 'g';
	printf("%s\n", a);
	system("pause");
	return 0;
}
//
//char* mystring(){
//	char buffer[6] = { 0 };
//	char* s = "Hello World!";
//	for (int i = 0; i < sizeof(buffer)-1; ++i){
//		buffer[i] = *(s + i);
//	}
//	return buffer;
//}

int main(){
	int i = 1;
	printf("%d,%d\n", sizeof(i++), i);
	//printf("%s\n", mystring());
	system("pause");
	return 0;
}
//255??????
int main(){
	char a[1000];
	int i;
	for (i = 0; i < 1000; ++i){
		a[i] = (char)(-1 - i);
	}
	printf("%d\n", strlen(a));
	system("pause");
	return 0;

//在字符串中找出第一个只出现一次的字符。如输入“abaccdeff",则输出‘b'
//要求时间复杂度为O(n)




int Find_FirstOne_Num(char* a, int len){
	int i = 0;
	int j = 0;
	int k = 0;
	int b[100] = { 0 };//这个数组用来记录每个字符出现的次数
	for (i = 0; i < len; ++i){
		k = 0;
		for (j = 0; j < len; ++j){
			if (a[i] == a[j]){
				++k;//因为前面k为0，所以此时遇到相等的先加k，再记录
				b[i] = k;
			}
		}
	}
	for (i = 0; i < len; ++i){
		if (b[i] == 1){
			return i;
		}
	}
	return len + 1;//此时没有出现单独的字符
}

int main(){
	char a[] = "abcacedfdf";
	int len = strlen(a);
	int ret=Find_FirstOne_Num(a, len);
	if (ret > len){
		printf("这个字符串中没有出现一次的字符！\n");
	}
	else {
		printf("这个字符串中出现一次的字符是：%c\n", a[ret]);
	}
	system("pause");
	return 0;
}

int fun(char* s){
	char* p = s;
	while (*p != '\0'){
		++p;
	}
	return (p - s);
}


int main(){
	printf("%d\n", fun("good"));
	system("pause");
	return 0;
}


int main(){
	const int i = 0;
	int* j = (int*)&i;
	*j = 1;
	printf("%d,%d\n", i, *j);
	system("pause");
	return 0;
}

//对于一个字符串，设计高效算法，找到第一次重复出现的字符。
//测样：“qywyer23tdd"放回y

int Find_FirstRepeat_Num(char* a, int len){
	int i = 0;
	int j = 0;
	int k = 0;
	int b[20] = { 0 };
	for (i = 0; i < len; ++i){
		k = 0;
		for (j = 0; j < len; ++j){
			if (a[i] == a[j]){
				++k;
				b[i] = k;
			}
		}
	}
	for (i = 0; i < len; ++i){
		if (b[i] == 2){
			return i;
		}
	}
	return len + 1;
}


int main(){
	char* a = "bwbor12ogr";
	int len = strlen(a);
	int ret = Find_FirstRepeat_Num(a, len);
	if (ret > len){
		printf("这个字符串中没有出现两次的字符！\n");
	}
	else {
		printf("这个字符串中第一次出现两次的字符为:%c\n", a[ret]);
	}
	system("pause");
	return 0;
}

int main(){
	int a[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
	int* p = a;
	printf("%d\n",*p);
	printf("%d\n", a[p - a]);
	system("pause");
	return 0;
}

int f(int x, int y){
	return (x&y) + ((x^y) >> 1);
}

int main(){
	int ret = f(2, 4);
	printf("%d\n", ret);
	system("pause");
	return 0;
}


//一个整形数组里除了两个数字之外，其他数字都出现了两次
//请写程序找出这两个只出现一次的数字
//例如数组为{1，3，5，7，1，3，5，9}，找出7和9

//
void Find_Num(int* arr){
	int ret = 0;
	int i = 0;
	for (i = 0; i < 10; ++i){
		ret = ret ^ arr[i];	//这样遍历并按位与之后其实得到的是这个数组中出现一次的两个数按位与的结果
	}
	int pos;
	for (i = 0; i < 32; ++i){
		if (ret & (1 << i)){	//在这个结果中找到2进制的1
			//这一步目的是在二进制位下找到这两个数首次出现的不同位,因为ret是两个数按位与的结果,也就是说在二进制位下,如果这两个数各自的操作数不同的话就能得到1.
			pos = i;	//记下产生不同的位置
			break;
		}
	}
	int num1 = 0, num2 = 0;
	for (i = 0; i < 10; ++i){
		//将数组中的数按照上面记录的位置分为两类,即与发生不同位置操作数相同的分为一类,不同分为一类.再分别在各自的类里与0按位与,也就是回到之前只考虑数组中仅有一个数字不是成对出现的情况.
		if (arr[i] & (1 << pos)){
			num1 = num1 ^ arr[i];
		}
		else {
			num2 = num2 ^ arr[i];
		}
	}
	printf("%d %d\n", num1, num2);
}


int main(){
	int arr[10] = { 1, 2, 3, 4, 5, 6, 4, 3, 2, 1 };
	Find_Num(arr);
	system("pause");
	return 0;
}


//打印*p表达a中元素？？？？？？？？？？？？/

int main(){
	int a[10] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	int* p = a;
	printf("%s\n", p);
	system("pause");
	return 0;
}
// 5?????????????????????????//
int main(){
	int c[] = { 1, 3, 5 };
	int* k = c + 1;
	printf("%d\n", *++k);
	system("pause");
	return 0;
}
// 16??????????????///
#define sum(a,b,c) a+b+c
int main(){
	int i = 3;
	int j = 2;
	printf("%d\n",i* sum(i, (i + j), j));
	system("pause");
	return 0;
}

int f(int n){
	static i = 1;
	if (n >= 5){
		return n;
	}
	n = n + 1;
	i++;
	return f(n);
}

int main(){
	printf("%d\n", f(1));
	system("pause");
	return 0;
}

//输入两个字符串，从第一个字符串中删除第二个字符串中所有的字符
//例如：输入“They are students."和"aeiou"
//则删除之后的第一个字符串变成“Thy r stdnts"


void delete(char* a, char* b, int len1, int len2){
	int i = 0;
	int j = 0;
	int tmp = 0;
	char* p = a;
	for (i = 0; i < len2; ++i){
		tmp = b[i];
		for (j = 0; j < len1 && a[j]!='\0'; ++j){
			if (tmp == a[j]){
				int f = j;
				//下面这个循环是用来将后面的字符提前，这样就能将两个相同的那个元素删除
				for (f; f < len1 && a[f]!='\0'; ++f){
					a[f] = a[f + 1];
				}
			}
		}
	}
	printf("%s\n", p);
}

int main(){
	char a[] = "They are students.";
	char b[] = "aeiou";
	int len1 = strlen(a);
	int len2 = strlen(b);
	delete(a, b, len1, len2);
	//printf("%s\n", delete(a, b, len1, len2));
	system("pause");
	return 0;
}


struct student{
	char name[10];
	int age;
	char gender;
}; std[3], *p = std;

int main(){
	scanf("%s", &std.);
	system("pause");
	return 0;
}

int main(){
	int k, j, s;
	for (k = 2; k < 6; k++, k++){
		s = 1;
		for (j = k; j < 6; j++){
			s += j;
		}
	}
	printf("%d\n", k);
	system("pause");
	return 0;
}
//8,8?????????????
int main(){
	int arr[] = { 6, 7, 8, 9, 10 };
	int* ptr = arr;
	*(ptr++) += 123;
	printf("%d,%d", *ptr,*(++ptr));
	system("pause");
	return 0;
}

//编写一个函数，求一个数字是否是回文数
//回文数：给定一个数，这个数顺读和逆读都是一样的
//例如：121，1221



int Is_Palind(int num){
	if (num < 0){
		return 0;
	}
	int len = 1;
	while (num / len >= 10){
		len *= 10;
	}
	while (num>0){
		//首先获取首尾大小
		int left = num / len;
		int right = num % 10;
		if (left != right){
			return 0;
		}
		else {
			//此时表示首尾相等，则删除首尾
			num = (num%len) / 10;
			len /= 100;
		}
	}
	return 1;
}

int main(){
	int num = 0;
	printf("请输入一个数：\n");
	scanf("%d", &num);
	int ret=Is_Palind(num);
	if (ret == 1){
		printf("这个数是回文数！\n");
	}
	else {
		printf("这个数不是回文数！\n");
	}
	system("pause");
	return 0;
}


int main(){
	char a[] = "123456789";
	char* p = a;
	int i = 0;
	while (*p){
		if (i % 2 == 0){
			*p = '!';
		}
		++i;
		++p;
	}
	printf("%s\n", a);
	system("pause");
	return 0;
}

//Afgd
int main(){
	char str[] = "ABCDEFG";
	char* p1;
	char* p2;
	p1 = "abcd";
	p2 = "efgh";
	strcpy(str + 1, p2 + 1);
	strcpy(str + 3, p1 + 3);
	printf("%s\n", str);
	system("pause");
	return 0;
}

int fun(char* s1, char* s2){
	int i = 0;
	while (s1[i] == s2[i] && s2[i] != '\0'){
		++i;
	}
	return (s1[i] == '\0' && s2[i] == '\0');
}

int main(){
	char s1[] = "acvd";
	char s2[] = "acvd";
	int ret = fun(s1, s2);
	if (ret == 1){
		printf("相等！\n");
	}
	else {
		printf("不相等！\n");
	}
	system("pause");
	return 0;
}

int main(){
	int j = 4;
	int i = j;
	for (; i < 2 * j; ++i){
		switch (i / j){
		case 0:
		case 1:
			printf("*");
			break;
		case 2:
			printf("#");
		}
	}
	system("pause");
	return 0;
}

//10？？？？？？？？？？？？？？/
int main(){
	int x = 1;
	int y = 012;
	printf("%d", y*x++);//先算++再*
	system("pause");
	return 0;
}

//65535????????????
int main(){
	unsigned short sht = 0;
	sht--;
	printf("%d", sht);
	system("pause");
	return 0;
}


// 模拟实现函数pow(x,y),实现运算x^y(x的y次方），这里x和y都为整数
int pow(int x,int y){
	int i = 0;
	int tmp = 1;
	for (i = 1; i <= y; ++i){
		tmp = tmp*x;
	}
	return tmp;
}

int main(){
	int x = 2;
	int y = 4;
	printf("%d\n",pow(x, y));
	system("pause");
	return 0;
}

int main(){
	char* s = "abcde";
	s += 2;
	printf("%s\n", s);
	system("pause");
	return 0;
}


int main(){
	int i;
	char a[20] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	for (i = 0; i < 10; ++i){
		a[i] = '0';
	}
	printf("%d\n", strlen(a));
	system("pause");
	return 0;
}
//0??????????
int main(){
	int x = 0, y = 0, z = 0;
	z = (x == 1) && (y = 2);
	printf("%d\n", y);
	system("pause");
	return 0;
}
//9????????????????????
void foo(int b[][3]){
	++b;
	b[1][1] = 9;
}

int main(){
	int a[3][3] = { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } };
	foo(a);
	printf("%d\n", a[2][1]);
	system("pause");
	return 0;
}

//10???????????/
int main(){
	int i = 10;
	long long t = sizeof(i++);
	printf("%d", i);
	system("pause");
	return 0;
}
#endif

//求一个有序数组中两个元素值相加为k的数字，放回这两个元素的下标。要求时间复杂度位O(n),空间复杂度为O(1)


int x, y;
void Find(int* a, int len, int k){
	int left = 0;
	int right = len - 1;
	int sum = 0;
	while (left <= right){
		sum = a[left] + a[right];
		if (sum < k){
			left++;
		}
		else if (sum>k){
			right--;
		}
		else {
			x = left;
			y = right;
			break;
		}
	}
}
int main(){
	int a[] = { 1, 2, 4, 6, 8, 9, 10};
	int k = 0;
	int len = sizeof(a) / sizeof(a[0]);
	printf("请输入一个数：\n");
	scanf("%d", &k);
	Find(a, len, k);
	printf("%d %d\n", x,y);
	system("pause");
	return 0;
}



