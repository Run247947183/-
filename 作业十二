#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>
#include<assert.h>
#include<string.h>
#if 0
//编写函数：
//unsigned int reverse_bit(unsigned int value);
//这个函数的返回值value的二进制位模式从左到右翻转后的值。

unsigned int reverse_bit(unsigned int value){
	int ret = 0;
	int i = 0;
	int a = 0;
	for (i = 0; i < 32; ++i){
		ret = ret << 1;
		a = value & 1;
		ret = ret | a;
		
		value = value>> 1;
	}
	return ret;
}

int main(){
	printf("%u\n", reverse_bit(25));
	system("pause");
}



//不使用（a + b） / 2这种方式，求两个数的平均值。



int main(){
	int a = 0;
	int b = 0;
	printf("请输入两个数:\n");
	scanf("%d %d", &a, &b);
	printf("%d", a + ((b - a) >> 1));
	system("pause");
}

//.编程实现：
//一组数据中只有一个数字出现了一次。其他所有数字都是成对出现的。
//请找出这个数字。（使用位运算）

int main(){
	int arr[] = { 1, 5, 5, 1, 7, 6, 7, 8, 8, 9, 9 };
	int i = 0;
	int len = sizeof(arr) / sizeof(arr[0]);


	for (i = 1; i < len; i++)
	{
		arr[0] = arr[0] ^ arr[i];//^异或运算符，相异为1想用为0.
	}
	printf("the single number is:%d\n", arr[0]);
	system("pause");
}
#endif
//有一个字符数组的内容为:"student a am i",
//	请你将数组的内容改为"i am a student".
//	要求：
//	不能使用库函数。
//	只能开辟有限个空间（空间个数和字符串的长度无关）。
//
//	student a am i
//	i ma a tneduts
//	i am a student

void swap(char* left, char* right){
	assert(left != NULL);
	assert(right != NULL);
	while (left < right){
		char tmp = *left;
		*left = *right;
		*right = tmp;
		++left;
		--right;
	}
}

void reverse(char* arr){
	//整体逆置
	int len = strlen(arr);
	swap(arr, arr + len - 1);
	//每个单词的逆置
	while (*arr != '\0'){
		//arr!='0'说明了没有到最后一个单词
		char* start = arr;//单词起始位置
		char* end = start;//单词结束位置
		while ((*end != ' ') && (*end != '\0')){
			++end;//end指向空格位置的地址
		}
		swap(start, end - 1);//单词起始位置是start，结束位置是end-1
		if (*end != '\0'){
			arr = end + 1;//当结束一个单词的逆置后，下一个单词的开始为空格后一个字符end+1
		}
		else {
			arr = end;
		}
	}
}
int main(){
	char arr[] = "student a am i";
	reverse(arr);
	printf("%s\n", arr);
	system("pause");
}
