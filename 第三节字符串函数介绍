//模拟实现strstr函数
//这个函数主要实现的是判断一个字符串是否是另一个字符串的子串
#endif
const char* Strstr(const char* str1, const char* str2){
	//1.首先进行参数的合法性判断
	if (str1 == NULL || str2 == NULL){
		return NULL;
	} if (*str2 == '\0'){
		return NULL;
	} 
	const char* black_ptr = str1;
	while (*black_ptr != '\0'){
		const char* red_ptr = black_ptr;
		const char* sub_ptr = str2;
		while (*red_ptr != '\0' && *sub_ptr != '\0'
			&& (*red_ptr == *sub_ptr)){
			++red_ptr;
			++sub_ptr;
		}
		//上面while不执行的三种情况如下
		if (*sub_ptr == '\0'){
			return black_ptr;
		}
		else {
			++black_ptr;
		}
	}
	return NULL;
}

int main(){
	char str1[] = "abcdefg";
	char str2[] = "def";
	const char* ret = Strstr(str1, str2);
	if (ret == NULL){
		printf("没找到！\n");
	}
	else {
		printf("找到了！\n");
	}
	system("pause");
	return 0;
}

int fain(){
	const char* arr1 = "abcd";
	char* const arr2 = "abcd";
	char const (*arr3) = "abcd";
	arr1 = 'g';
	*arr2 = 'g';
	system("pause");
	return 0;
}

#endif

size_t Strlen(char* a){
	int i = 0;
	for (i = 0; a[i] != '\0'; ++i){
		//这个循环内不需要其他运算
	}
	return i;
}

int main(){
	char a[] = "hehe";
	printf("%d\n", Strlen(a));
	system("pause");
	return 0;
}

//模拟实现strcmp

int Strcmp(char* p1, char* p2){
	//首先进行参数合法性判断
	assert(p1 != NULL && p2 != NULL);//如果里面的条件不满足那么程序直接奔溃
	while (*p1 != '\0' && *p2 != '\0'){
		if (*p1 > *p2){
			return 1;
		}
		else if (*p1 < *p2){
			return -1;
		}
		else {
			++p1;
			++p2;
		}
	}
	//p1和p2之中至少存在一个数组遇到'\0'
	if (*p1>*p2){
		//这种情况说明p2遇到了'\0'，因为\0的asiil值是0，所以肯定是小的那一方
		return 1;
	}
	else if (*p1 < *p2){
		//这种情况说明p1遇到了'\0'
		return -1;
	}
	else {
		return 0;
	}
}


int main(){
	char str1[] = "hahahaha";
	char str2[] = "haha";
	int ret = Strcmp(str1, str2);
	if (ret == 0){
		printf("str1==str2\n");
	}
	else if (ret < 0){
		printf("str1<str2\n");
	}
	else {
		printf("str1>str2\n");
	}
	system("pause");
	return 0;
}

