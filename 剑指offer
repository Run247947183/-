#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<assert.h>
#if 0
//P38
int GetSize(int data[]){
	return sizeof(data);
}
//结果 20 ，4，4

int main(){
	int data1[] = { 1, 2, 3, 4, 5 };
	int size1 = sizeof(data1);
	int* data2 = data1;
	int size2 = sizeof(data2);//data2是int类型指针，在32位系统下,对指针求sizeof结果都为4
	int size3 = GetSize(data1);//在c/c++中，当数组作为函数的参数进行传递时，数组就会自动退化为同类型的指针。所以size3相当于是求指针的字节
	printf("%d, %d, %d", size1, size2, size3);
	system("pause");
	return 0;
}
//P39
//题目：找出数组中重复的数字
//例如：数组{2，3，1，0，2，5，3}，重复数字为2和3
void Find_Repeat_Num(int* arr,int len){
	int i = 0;
	int j = 0;
	int count = 0;
	printf("重复的数字为：\n");
	for (i = 0; i < len-1; ++i){
		for (j = i+1; j < len; ++j){
			if (arr[i] == arr[j]){
				printf("%d ", arr[i]);
			}
		}
	}
	printf("\n");
}

int main(){
	int arr[8] = { 1, 4, 5, 6, 6, 4, 2, 9 };
	Find_Repeat_Num(arr, 8);
	system("pause");
	return 0;
}

//P44
//题目：二维数组中的查找
//这个二维数组，每一行都按照从左到右递增，每一列都按照从上到下递增
//输入一个整数，判断数组中是否含有该整数

int Find_Num(int str[3][3],int num){
	int a = 2;
	int b = 0;
	while (1){
		if (num > str[a][b] && b < 3){
			++b;
		}
		else if (num < str[a][b] && a > 0){
			--a;
		}
		else if (num == str[a][b]){
			return 1;
			break;
		}
		else {
			return 0;
			break;
		}
	}
}

int main(){
	int arr[3][3] = { 
		3,5,8,
		7,10,13,
		8,12,20
	};
	int n = 0;
	printf("请输入一个整数：\n");
	scanf("%d", &n);
	int ret = Find_Num(arr,n);
	if (ret == 0){
		printf("该数组不含有该整数！\n");
	}
	else {
		printf("该数组含有该整数！\n");
	}
	system("pause");
	return 0;
}

//P49
int main(){
	char str1[] = "hello world";
	char str2[] = "hello world";

	char* str3 = "hello world";
	char* str4 = "hello world";

	if (str1 == str2){
		printf("str1 and str2 are same.\n");
	}
	else {
		printf("str1 and str2 are not same.\n");
		//因为我们会为这两个字符串数组分配两个长度为12字符的空间，并把”hello world"分别复制进去
		//但是这两个数组的初始地址不同，又因为str1==str2比较的是两个字符串数组的首元素地址
		//所以这不相同
	}
	if (str3 == str4){
		printf("str3 and str4 are same.\n");
		//指向同一个地址，所以相同
	}
	else {
		printf("str3 and str4 are not same.\n");
	}
	system("pause");
	return 0;
}
#endif

//P51
//题目：实现一个函数，把字符串中的空格替换成%20
char* ReplaceBlank(char* arr,int len){
	//参数合法性判断
	assert(arr != NULL);
	int original_len = 0;
	int num_of_blank = 0;
	int i = 0;
	while (arr[i] != '\0'){
		++original_len;
		if (arr[i] == ' '){
			++num_of_blank;
		}
		++i;
	}
	int new_len = original_len + num_of_blank * 2;//新的长度是原有长度加上空格数乘2，因为把空格替换成%20比原来的空格多了2
	int len1 = original_len;
	int len2 = new_len;
	while (len1 > 0 && len2 > len1){
		if (arr[len1] == ' '){
			arr[len2--] = '0';//替换之后还要向前走一格，此处表示先替换后往前
			arr[len2--] = '2';
			arr[len2--] = '%';
		}
		else {
			arr[len2--] = arr[len1];
		}
		--len1;
	}
	return arr;
}

int main(){
	char str[20] = "we are happy";
	printf("%s\n", ReplaceBlank(str,20));
	system("pause");
	return 0;
}
//P76
//题目：求斐波那契数

//1.递归做法：效率低下，如果数较大，那么重复出现的数字太多，重复计算拖慢了计算速度
int Fib(unsigned int n){
	if (n <= 0){
		return 0;
	}
	if (n == 1){
		return 1;
	}
	return Fib(n - 1) + Fib(n - 2);
}

//2.高效做法
//
//int Fib(unsigned n){
//	if (n <= 0){
//		return 0;
//	}
//	if (n == 1){
//		return 1;
//	}
//	int Fib_one = 0;
//	int Fib_two = 1;
//	int Fib_count = 0;
//	for (int i = 0; i <= n; ++i){
//		Fib_count = Fib_one + Fib_two;
//		Fib_one = Fib_two;
//		Fib_two = Fib_count;
//	}
//	return Fib_count;
//}
//
int main(){
	int n = 10;
	int ret = Fib(n);
	printf("%d", ret);
	system("pause");
	return 0;
}

#endif
#if 0

//P100
//题目：计算一个整数的二进制中1的个数

//解法1：此方法有明显缺陷，当输入的值为负数时，程序崩溃
//因为负数的最高位是1，如果一直做右移运算，那么最终这个数字就会陷入死循环
int Find_One(int n){
	int count = 0;
	while (n){
		if (n & 1){
			count++;
		}
		n = n >> 1;
	}
	return count;
}

int main(){
	int n = -1;
	int ret=Find_One(n);
	printf("%d\n", ret);
	system("pause");
	return 0;
}
//解法2：

int Find_One(int n){
	int count = 0;
	unsigned int flag = 1;
	while (flag){
		if (n & flag){
			++count;
		}
		flag = flag << 1;
	}
	return count;
}

int main(){
	int n = 9;
	printf("%d\n", Find_One(n));
	system("pause");
	return 0;
}

//解法3（推荐）:

int Find_One(int n){
	int count = 0;
	while (n){
		++count;
		n = n & (n - 1);
	}
	return count;
}

int main(){
	int n = 9;
	printf("%d\n", Find_One(n));
	system("pause");
	return 0;
}

//P114
//题目：打印从1到最大的n位数
//例如：输入3，则打印出1,2,3一直到最大的3位数999
//这道题有一个重大陷阱，没有告诉我们n的范围，也就是说万一n的取值很大时，可能用int和long long都会溢出
void PrintBiggest_n_Digit(int n){
	if (n <= 0){
		return;
	}
	//先找出最大的n位数
	int number = 1;
	int i = 0;
	while (i++ < n){
		number *= 10;
	}
	//开始打印每个数
	for (i = 1; i < number; ++i){
		printf("%d\n", i);
	}
}
int main(){
	PrintBiggest_n_Digit(0);
	system("pause");
	return 0;
}

void ReorderOddEven(int* arr, unsigned int length){
	//先进行参数合法性判断
	if (arr == NULL || length == 0){
		return;
	}
	int* Begin = arr;
	int* End = arr + length - 1;
	while (Begin < End){
		while (!fun(*Begin){
			Begin++;
		}
		while ((fun(*End)){
			End--;
		}
		if (Begin < End){
			int temp = *Begin;
			*Begin = *End;
			*End = temp;
		}
	}
}

int main(){
	int arr[] = { 2, 4, 3, 7, 9 };
	int length = sizeof(arr) / sizeof(arr[0]);
	ReorderOddEven(arr, length);
	for (int i = 0; i < length; ++i){
		printf("%d ", arr[i]);
	
	system("pause");
	return 0;
}
#endif
//P206
//题目：数组中出现次数超过一半的数字
//解法一：

//int MoreThanHalfNum(int* numbers, int length){
//	if (CheckInvalidArray(numbers, length)){
//		return 0;
//	}
//	int middle = length >> 1;//相当于除2
//	int start = 0;
//	int end = length - 1;
//	int index = Partition(numbers, length, start, end);
//}


	//解法二：

	bool g_bInputInvalid = false;

	bool CheckInvaliadArray(int* numbers, int length){
		g_bInputInvalid = false;
		if (numbers == NULL || length <= 0){
			g_bInputInvalid = true;
		}
		return g_bInputInvalid;
	}

	bool CheckMoreThanHalf(int* numbers, int length, int number){
		int times = 0;
		for (int i = 0; i < length; ++i){
			if (numbers[i] == number){
				times++;
			}
		}
			bool isMoreThanHalf = true;
			if (times * 2 <= length){
				g_bInputInvalid = true;
				isMoreThanHalf = false;
			}
		return isMoreThanHalf;
	}
	int MoreThanHalfNum(int* numbers, int length){
		if (CheckInvaliadArray(numbers, length)){
			return 0;
		}
		int result = numbers[0];
		int times = 1;
		for (int i = 1; i < length; ++i){
			if (times == 0){
				result = numbers[i];
				times = 1;
			}
			else if (result == numbers[i]){
				times++;
			}
			else {
				times--;
			}
		}
		if (!CheckMoreThanHalf(numbers, length, result)){
			result = 0;
		}
		return result;
	}

int main(){
	int arr[] = { 4, 6, 2, 4, 4, 5, 4, 6, 4 };
	int len = sizeof(arr) / sizeof(arr[0]);
	int ret = MoreThanHalfNum(arr, len);
	if (ret == 0){
		printf("这个数组中没有超过长度一半的数字出现！\n");
	}
	else {
		printf("超过数组长度一半的数字为：%d\n", ret);
	}
	system("pause");
	return 0;
}
#endif

//P218
//题目：连续子数组的最大和
//输入一个整型数组，数组里有正数也有负数，数组中的一个或者连续多个整数组成一个子数组，求所有子数组的和的最大值。要求时间复杂度为O(n)

//解法一：

int FindGreatestSumOfSubArray(int* arr, int len){
	if (arr == NULL || len <= 0){
		return 0;
	}
	int Cursum = 0;
	int GreatestSum = 0;
	for (int i = 0; i < len; ++i){
		if (Cursum <= 0){
			Cursum = arr[i];
		}
		else {
			Cursum += arr[i];
		}if (Cursum>GreatestSum){
			GreatestSum = Cursum;
		}
	}
	return GreatestSum;
}

int main(){
	int str[] = { 1, -2, 3, 10, -4, 7, 2, -5 };
	int length = sizeof(str) / sizeof(str[0]);
	int ret = FindGreatestSumOfSubArray(str, length);
	if (ret == 0){
		printf("您输入的数组有误！\n");
	}
	else {
		printf("最大字数组和为：%d\n", ret);
	}
	system("pause");
	return 0;
}



//P243
//题目：第一个只出现一次的字符    
#define TableSize 256

char FirstNotRepeatingChar(char* string){
	if (string == NULL){
		return '\0';
	}
	unsigned int hashTable[TableSize];
	for (unsigned int i = 0; i < TableSize; ++i){
		hashTable[i] = 0;
	}
	char* pHashKey = string;
	while (*(pHashKey) != '\0'){
		hashTable[*(pHashKey++)]++;//???????????
	}
	pHashKey = string;
	while (*(pHashKey) != '\0'){
		if (hashTable[*pHashKey] == 1){
			return *pHashKey;
		}
		pHashKey++;
	}
	return '\0';
}

int main(){
	char string[] = "abaccdeff";
	printf("%c\n", FirstNotRepeatingChar(string));
	system("pause");
	return 0;
}
//P249
//题目:数组中的逆序对
//数组中的两个数字，如果前面一个数大于后面的数字，那么这两个数字组成了逆序对
//例如数组{7，5，6，4}中，一共有五个逆序对

//解法一(时间复杂度为O(n的平方))：
int FindReverseOrder(int* arr,int length){
	int i = 0;
	int j = 0;
	int count = 0;
	if (arr == NULL || length <= 0){
		return 0;
	}
	for (j = 0; j < length; ++j){
		int temp = arr[j];
		for (i = j+1; i < length ; ++i){
			if (temp > arr[i]){
				++count;
			}
		}
	}
	return count;
}

int main(){
	int str[] = { 7, 5, 6, 4 };
	int len = sizeof(str) / sizeof(str[0]);
	int ret = FindReverseOrder(str, len);
	if (ret == 0){
		printf("对不起，您输入的数组有误！\n");
	}
	else {
		printf("该数组有逆序对：%d\n",ret);
	}
	system("pause");
	return 0;
}

//解法二：

//P264
//题目：在排序数组中查找数字
//统计一个数字在数组出现的次数，例如数组{1，2，3，3，3，3，4，5}中3的出现了4次，输出3

//解法一(时间复杂度为O(n)):二分查找

int FindNumFrequency(int* str, int length,int num){
	int count = 0;
	int left = 0;
	int right = length - 1;
	int mid = 0;
	if (str == NULL || length <= 0){
		return 0;
	}
	while (left <= right){
		mid = (left + right) >> 1;
		if (str[mid] == num){
			++count;
			++mid;
		}
		else if (str[mid]>num) {
			right = mid - 1;
		}
		else{
			left = mid + 1;
		}
	}
}

#endif

//解法二：

int GetFirstNum(const int* str, int length, int left, int right, int num){
	if (left > right){
		return -1;
	}
	int mid_length = (left + right) >> 1;
	int mid_str = str[mid_length];
	if (mid_str == num){
		//这种情况是中间元素为num，然后再判断这个数是不是第一个num
		if ((mid_length > 0 && str[mid_length - 1] != num )|| mid_length == 0){
			//如果为下标0，那么它一定是第一个num
			//如果下标不为0，并且前一个数也不为num，又因为是按顺序排列，那么它一定为第一个num
			return mid_length;
		}
		else{
			//既然它不为第一个num，那么第一个num一定在它的左边
			right = mid_length - 1;
		}
	}
	else if (mid_str > num){
		right = mid_length - 1;
	}
	else {
		left = mid_length + 1;
	}
	return GetFirstNum(str, length, left, right, num);//次情况说明没有找到第一个num，递归接着查找第一个num
}

int GetLastNum(const int* str, int length, int left, int right, int num){
	if (left > right){
		return -1;
	}
	int mid_length = (left + right) >> 1;
	int mid_str = str[mid_length];
	if (mid_str == num){
		if ((mid_length < length - 1 && str[mid_length + 1] != num )|| mid_length == length - 1){
			//如果下标等于该数组的最后一个下表，那么它一定为最后一个num
			//如果下标不为该数组的最后一个下标，并且它的后一个元素不为num，那么它也一定为最后一个num
			return mid_length;
		}
		else{
			left = mid_length + 1;
		}
	}
	else if (mid_str < num){
		left = mid_length + 1;
	}
	else {
		right = mid_length - 1;
	}
	return GetLastNum(str, length, left, right, num);
}

int GetNum(int* str, int length, int num){
	int number = 0;
	if (str != NULL && length > 0){
		int first = GetFirstNum(str, length, 0, length-1, num);
		int last = GetLastNum(str, length, 0, length - 1, num);
		if (last > -1 && first > -1){
			//大于-1是再证明num的存在，这两个只要一个大于-1，那么另一个也一定大于-1
			number = last - first + 1;
		}
	}
	return number;
}

int main(){
	int arr[] = { 1, 2, 3, 3, 3, 3, 4, 5 };
	int len = sizeof(arr) / sizeof(arr[0]);
	printf("%d\n", GetNum(arr,len,3));
	system("pause");
	return 0;
}


