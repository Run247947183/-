#include<stdio.h>
#include<stdlib.h>

int Add(int x, int y){
	return x + y;
}
int Sub(int x, int y){
	return x - y;
}
int Mul(int x, int y){
	return x * y;
}
int Div(int x, int y){
	return x / y;
}

int main(){
	int num1 = 10;
	int num2 = 20;
	int choice = 0;
	printf("请输入您的选择（1 表示+，2 表示-,3 表示*，4 表示/）\n");
	scanf("%d\n", &choice);
	int ret = 0;
	//第一种方法 
	if (choice == 1){
		ret = Add(num1, num2);
	}
	else if (choice == 2){
		ret = Sub(num1, num2);
	}
	else if (choice == 3){
		ret = Mul(num1,num2);
	}
	else if (choice == 4){
		ret = Div(num1, num2);
	}
	else{
		printf("您的输入有误！\n");
	}
	//第二种写法：使用转移表
	typedef int(*Func)(int, int);
	Func arr[] = {
		Add,//&Add也可以
		Sub,
		Mul,
		Div,
	};
	if (choice<1 || choice>4){
		printf("您的输入有误！\n");
		return 1;
	}
	ret = arr[choice - 1](num1, num2);	//choice-1表示先让用户选择哪种算法，然后后面的（）是函数指针的调用
	system("pause");
	return 0;
}

#include<stdio.h>
#include<stdlib.h>

void swap(int* x, int* y){
	int tmp = *x;
	*x = *y;
	*y = tmp;
}

void bubble_sort(int *arr, int size){
	//有两种方式1.找最小的排序  2.找最大的排序
	//这里用找最小的排序方法
	//[0,bound)这是已排序区间
	//[bound,0)待排序区间
	for (int bound = 0; bound < size; bound++){
		//此时作用是找到一个比较小的值,并放到合适的位置
		for (int cur = size - 1; cur>bound; cur--){
			//此时作用是完成一趟查找中查找最小的过程
			if (arr[cur-1] > arr[cur]){
				//此处为升序排序
				//意思是如果前一个元素比后一个元素大,说明不符合要求,那就交换这俩元素
				swap(&arr[cur - 1], &arr[cur]);
			}
		}
	}
}

int main(){
	int arr[5] = { 4, 5, 6, 9, 8 };
	int size = sizeof(arr) / sizeof(arr[0]);
	bubble_sort(arr, size);
	for (int i = 0; i < size; i++){
		printf("%d ", arr[i]);
	}printf("\n");
	system("pause");
}
