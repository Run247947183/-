/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

 // 可以把这道题理解成求左右子树的最大深度
class Solution {
    int ret = 0;
    public int diameterOfBinaryTree(TreeNode root) {
        if (root == null) {
            return 0;
        }
        depth(root);
        return ret;
    }
    public int depth(TreeNode root) {
        if (root == null) {
            return 0;
        }
        int left = depth(root.left);
        int right = depth(root.right);
        // 时刻更新 ret 的值
        // 保持 ret 的值是左右子树的最大深度的和
        if (right + left > ret) {
            ret = right + left;
        }
        return 1 + (left > right ? left : right);
    }
}
